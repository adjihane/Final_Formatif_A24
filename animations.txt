Utiliser avec Angular
Il faut commencer par cr√©er l'animation en CSS *******************
@keyframes attack {
  0% {
    transform: translateY(0%);
  }
  20% {
    transform: translateY(10%);
  }
  60% {
    transform: translateY(-50%);
  }
  100% {
    transform: translateY(0%);
  }
}

// Ensuite on assigne l'animation √† une classe CSS*********************
.attack {
  animation: attack 0.5s;
  -webkit-animation: attack 0.5s;
  //C'est peut-√™tre overkill de mettre toutes les autres, mais ü§∑‚Äç‚ôÇÔ∏è
  -moz-animation: attack 0.5s;
  -o-animation: attack 0.5s;
  -ms-animation: attack 0.5s;
}

Finalement, on peut assigner la classe CSS avec une condition ****************
<app-card [class.attack]="mycard.attack===true"></app-card>


Angular animations ********************
@Component({
  selector: "my-component",
  templateUrl: "my-component.component.html",
  animations: [
    trigger("montrigger", [transition("* => *", useAnimation(bounce))]),
  ],
})
export class MyComponent {
  mavariable: any;
}

Dans le hmtl**********************************
<div [@montrigger]="mavariable"></div>

Trigger
C'est ce qui va permettre de d√©clencher l'animation************************************
animations: [
    trigger('montrigger',
      [transition('* => *', useAnimation(bounce))]
    )
],



On peut √©galement mettre des ':increment' ou ':decrement'*************************************

animations: [
    trigger('bounce', [transition(':increment', useAnimation(bounce))]),
    trigger('shake', [transition(':decrement', useAnimation(shake))])
],

html********************
<div [@shake]="mavariable" [@bounce]="mavariable"></div>

delais********************
Quand on parle d'animation, on parle presque toujours de d√©lais. Surtout lorsque l'on fait des s√©quences d'animations.

Dans l'exemple suivant, on voit que l'on met bounce √† true et on le met √† false apr√®s 1000 ms (donc 1 seconde).

bounceMe() {
  this.bounce = true;
  setTimeout(() => {this.bounce = false;}, 1000);
}



ANIMATION2 *****
Diff√©rentes techniques
Il y a de nombreuses fa√ßons d'obtenir le m√™me r√©sultat lorsque l'on veut jouer des animations. Voici quelques exemples qui font tous un peu la m√™me chose: "Jouer une animation shake pendant 1 seconde, puis flip pendant 2 secondes"

Pour les explications suivantes, on assume qu'il y a une configuration comme celle-ci pour les animations Angular:

trigger("shake", [
  transition(":increment", useAnimation(shakeX, { params: { timing: 1000 } })),
]),
trigger("flip", [
  transition(":increment", useAnimation(flip, { params: { timing: 2000 } })),
]),
// ...
ng_shake = 0;
ng_flip = 0;

<div [@shake]="ng_shake" [@flip]="ng_flip"></div>

Et dans le cas d'une animation CSS, il y a la configuration suivante:**************

css_shake = false;
css_flip = false;

html********
<div [class.shake]="css_shake" [class.flip]="css_flip"></div>



setTimeout les uns dans les autres******************************
Avec les animations Angular
shakeFlipAndBounce_Angular_1() {
  this.ng_shake++;
  setTimeout(() => {
    // Apr√®s 1 seconde
    this.ng_flip++;
  }, 1000);
  // Apr√®s 0 seconde
}

Avec les animations CSS, c'est un peu moins joli, car il faut √©galement mettre les valeurs √† false!
shakeFlipAndBounce_CSS_1() {
  this.css_shake = true;
  setTimeout(() => {
    // Apr√®s 1 seconde
    this.css_shake = false;
    this.css_flip = true;
    setTimeout(() => {
      // Apr√®s 3 secondes
      this.css_flip = false;
    }, 2000);
  }, 1000);
  // Apr√®s 0 seconde
}



setTimeout un √† la suite de l'autre***************************
On peut √©galement d√©marrer tous les setTimeout d'un m√™me coup, mais avec d√©lais diff√©rents

CSS
shakeFlipAndBounce_CSS_2() {
  this.css_shake = true;

  setTimeout(() => {
    // Apr√®s 1 seconde (shake est termin√©)
    this.css_shake = false;
    this.css_flip = true;
  },1000);

  setTimeout(() => {
    // Apr√®s 3 (1+2) secondes (flip est termin√©)
    this.css_flip = false;
  },3000);
  // Apr√®s 0 seconde
}


Avec une m√©thode async************************
On peut √©galement utiliser un m√©lange de await et de async et un timer

CSS
async shakeFlipAndBounce_CSS_3() {
  this.css_shake = true;

  await lastValueFrom(timer(1000));
  // Apr√®s 1 seconde
  this.css_shake = false;
  this.css_flip = true;

  await lastValueFrom(timer(2000));
  // Apr√®s 3 secondes
  this.css_flip = false;
}

On peut se cr√©er une m√©thode pour faire nos d√©lais. On peut l'appeler waitFor*************************

async waitFor(delayInSeconds:number) {
  await lastValueFrom(timer(delayInSeconds * 1000));
}

Boucle infinie***********************************
Si on veut joueur la m√™me animation, tant qu'une valeur est vraie, on peut le faire avec de la r√©cursion

playLoop_Angular_1() {
  this.ng_shake++;

  setTimeout(() => {
    // Apr√®s 1 seconde
    if(this.keepPlayingAnimation)
      this.playLoop_Angular_1();
  },1000);
  // Apr√®s 0 seconde
}

Mais on peut √©galement le faire dans une boucle avec une m√©thode async

async playLoop_Angular_2() {
  while(this.keepPlayingAnimation){
    this.ng_shake++;
    await lastValueFrom(timer(1000));
  }
}

Boucle infinie avec une s√©quence*************************************
Si on veut joueur 2 animations (shake et bounce), une apr√®s l'autre, √† l'infini

playLoop_Angular_3() {
  this.playShake();
}

playShake() {
  this.ng_shake++;
  setTimeout(() => {
    // On appel playBounce, qui va appeler playShake, qui va appeler playBounce, qui va appeler playShake, qui va appeler....
    this.playBounce();
  },1000);
}

playBounce() {
  this.ng_bounce++;
  setTimeout(() => {
    this.playShake();
  },1000);